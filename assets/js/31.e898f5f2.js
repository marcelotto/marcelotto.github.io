(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{218:function(t,a,s){"use strict";s.r(a);var e=s(2),n=Object(e.a)({},function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"validation"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#validation","aria-hidden":"true"}},[t._v("#")]),t._v(" Validation")]),t._v(" "),s("p",[t._v("A schema can be provided in two formats: ShExC, the language described in the "),s("a",{attrs:{href:"http://shex.io/shex-primer/",target:"_blank",rel:"noopener noreferrer"}},[t._v("ShEx primer"),s("OutboundLink")],1),t._v(" or ShExJ, a JSON-based format for shape expressions. Both formats have a dedicated module with a "),s("code",[t._v("decode")]),t._v(" function to get the ShEx schema from a string in the respective language.")]),t._v(" "),s("div",{staticClass:"language-elixir extra-class"},[s("pre",{pre:!0,attrs:{class:"language-elixir"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token atom symbol"}},[t._v(":ok")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" schema"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" \n  ShEx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ShExC"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("decode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"""\n    PREFIX ex: <http://ex.example/#>\n    PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n    PREFIX school: <http://school.example/#>\n    PREFIX foaf: <http://xmlns.com/foaf/0.1/>\n\n    school:enrolleeAge xsd:integer MinInclusive 13 MaxInclusive 20\n\n    school:Enrollee {\n      foaf:age @school:enrolleeAge ;\n      ex:hasGuardian IRI {1,2}\n    }\n    """')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("For both formats there's also a bang variant "),s("code",[t._v("decode!")]),t._v(" which returns the result directly (not in an ok tuple) and fails in error cases.")]),t._v(" "),s("p",[t._v("RDF data can now be validated with such a schema and a ShapeMap passed to the "),s("code",[t._v("ShEx.validate/3")]),t._v(" function. For the ShapeMap you can also pass any data structure from which an ShapeMap can be constructed.")]),t._v(" "),s("div",{staticClass:"language-elixir extra-class"},[s("pre",{pre:!0,attrs:{class:"language-elixir"}},[s("code",[t._v("result_shape_map "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("\n    ShEx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("validate"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n      RDF"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Turtle"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("read_string!"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"""\n        PREFIX ex: <http://ex.example/#>\n        PREFIX inst: <http://example.com/users/>\n        PREFIX school: <http://school.example/#>\n        PREFIX foaf: <http://xmlns.com/foaf/0.1/>\n\n        inst:Alice foaf:age 13 ;\n          ex:hasGuardian inst:Person2, inst:Person3 .\n\n        inst:Bob foaf:age 15 ;\n          ex:hasGuardian inst:Person4 .\n\n        inst:Claire foaf:age 12 ;\n          ex:hasGuardian inst:Person5 .\n\n        inst:Don foaf:age 14 .\n        """')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      ShEx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ShExC"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("decode!"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"""\n        PREFIX ex: <http://ex.example/#>\n        PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n        PREFIX school: <http://school.example/#>\n        PREFIX foaf: <http://xmlns.com/foaf/0.1/>\n\n        school:enrolleeAge xsd:integer MinInclusive 13 MaxInclusive 20\n\n        school:Enrollee {\n          foaf:age @school:enrolleeAge ;\n          ex:hasGuardian IRI {1,2}\n        }\n        """')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("%")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        ~I"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("http:")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("example"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("users"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("Alice"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" ~I"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("http:")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("school"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("example"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#Enrollee>,")]),t._v("\n        ~I"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("http:")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("example"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("users"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("Bob"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" ~I"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("http:")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("school"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("example"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#Enrollee>,")]),t._v("\n        ~I"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("http:")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("example"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("users"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("Claire"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" ~I"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("http:")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("school"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("example"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#Enrollee>,")]),t._v("\n        ~I"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("http:")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("example"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("users"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("Don"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" ~I"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("http:")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("school"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("example"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#Enrollee>,")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("The result of the validation is a result ShapeMap for which the associations now have the value "),s("code",[t._v(":conformant")]),t._v(" or "),s("code",[t._v(":nonconformant")]),t._v(" in the "),s("code",[t._v("status")]),t._v(" field of the association. For example:")]),t._v(" "),s("div",{staticClass:"language-elixir extra-class"},[s("pre",{pre:!0,attrs:{class:"language-elixir"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" association "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v(" result_shape_map "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v("\n  IO"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("puts"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token delimiter punctuation"}},[t._v("#{")]),t._v("inspect association"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("node"),s("span",{pre:!0,attrs:{class:"token delimiter punctuation"}},[t._v("}")])]),t._v(" is "),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token delimiter punctuation"}},[t._v("#{")]),t._v("association"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("status"),s("span",{pre:!0,attrs:{class:"token delimiter punctuation"}},[t._v("}")])]),t._v('"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n")])])]),s("p",[t._v("will output")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("~I<http://example.com/users/Alice> is conformant\n~I<http://example.com/users/Bob> is conformant\n~I<http://example.com/users/Claire> is nonconformant\n~I<http://example.com/users/Don> is nonconformant\n")])])]),s("p",[t._v("The "),s("code",[t._v("reason")]),t._v(" field of an association contains a list of "),s("code",[t._v("ShEx.Violation")]),t._v(" structures with details about the reason why it's nonconformant. The fields of these depend on the type of violation. You can get a string representation of any type of violation with the "),s("code",[t._v("ShEx.Violation.message/1")]),t._v(" function.")]),t._v(" "),s("p",[t._v("If you want to output the failures of the result, instead of filtering the nonconformant associations, you can also access them directly, since the associations are partitioned on a result ShapeMap into the fields "),s("code",[t._v("conformant")]),t._v(" and "),s("code",[t._v("nonconformant")]),t._v(".")]),t._v(" "),s("div",{staticClass:"language-elixir extra-class"},[s("pre",{pre:!0,attrs:{class:"language-elixir"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" association "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v(" result_shape_map"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("nonconformant "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v("\n  IO"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("puts "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"""\n    '),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token delimiter punctuation"}},[t._v("#{")]),t._v("inspect association"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("node"),s("span",{pre:!0,attrs:{class:"token delimiter punctuation"}},[t._v("}")])]),t._v(" is not valid because: "),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token delimiter punctuation"}},[t._v("#{")]),t._v("\n        association"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("reason \n        "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|>")]),t._v(" Enum"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("map"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token capture function"}},[t._v("&ShEx.Violation.message/1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|>")]),t._v(" Enum"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("join"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n       "),s("span",{pre:!0,attrs:{class:"token delimiter punctuation"}},[t._v("}")])]),t._v('\n    """')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n")])])]),s("p",[t._v("This will output:")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("~I<http://example.com/users/Claire> is not valid because:\n- matched none of at least 1 ~I<http://xmlns.com/foaf/0.1/age> triples\n  - %RDF.Literal{value: 12, datatype: ~I<http://www.w3.org/2001/XMLSchema#integer>} is less than 13.0\n\n~I<http://example.com/users/Don> is not valid because:\n- matched none of at least 1 ~I<http://ex.example/#hasGuardian> triples\n")])])]),s("h2",{attrs:{id:"parallelization"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#parallelization","aria-hidden":"true"}},[t._v("#")]),t._v(" Parallelization")]),t._v(" "),s("p",[t._v("The validation of all the nodes in ShapeMap can also run be run in parallel by passing the option "),s("code",[t._v("parallel: true")]),t._v(".")]),t._v(" "),s("div",{staticClass:"language-elixir extra-class"},[s("pre",{pre:!0,attrs:{class:"language-elixir"}},[s("code",[t._v("result "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ShEx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("validate"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" schema"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" shape_map"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("parallel:")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("Under the hood the work of processing the nodes is distributed in batches over your CPUs with the "),s("a",{attrs:{href:"https://github.com/plataformatec/flow",target:"_blank",rel:"noopener noreferrer"}},[t._v("Flow"),s("OutboundLink")],1),t._v(" library. Since for small amounts of nodes to be validated the usage of Flow means a little overhead, if you don't provide the option explicitly the "),s("code",[t._v("parallel")]),t._v(" flag is set to "),s("code",[t._v("true")]),t._v(" only for query ShapeMaps (as these usually produce more ShapeMap associations) and fixed ShapeMaps with more than 10 ShapeMap associations.")]),t._v(" "),s("p",[t._v("You can however turn off this auto-setting of the "),s("code",[t._v("parallel")]),t._v(" flag with the "),s("code",[t._v("parallel")]),t._v(" application configuration field:")]),t._v(" "),s("div",{staticClass:"language-elixir extra-class"},[s("pre",{pre:!0,attrs:{class:"language-elixir"}},[s("code",[t._v("config "),s("span",{pre:!0,attrs:{class:"token atom symbol"}},[t._v(":shex")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("parallel:")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n")])])]),s("p",[t._v("ShEx.ex automatically uses sane defaults for the Flow configuration. You can still try to tweak them for yourself. The options to "),s("code",[t._v("ShEx.validate/4")]),t._v(" are passed through to "),s("a",{attrs:{href:"https://hexdocs.pm/flow/Flow.html#from_enumerable/2%60",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("Flow.from_enumerable/2")]),s("OutboundLink")],1),t._v(". You can also configure them globally:")]),t._v(" "),s("div",{staticClass:"language-elixir extra-class"},[s("pre",{pre:!0,attrs:{class:"language-elixir"}},[s("code",[t._v("config "),s("span",{pre:!0,attrs:{class:"token atom symbol"}},[t._v(":shex")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("flow_opts:")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("max_demand:")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("min_demand:")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("stages:")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("p",[t._v("These default options are used whenever "),s("code",[t._v("parallel")]),t._v(" is set to "),s("code",[t._v("true")]),t._v(" and no Flow option is provided on a "),s("code",[t._v("ShEx.validate/4")]),t._v(" call.")]),t._v(" "),s("p",[t._v("You're invited to share your experience or thoughts on the "),s("a",{attrs:{href:"https://discuss.rdf.community/c/rdf-tooling-libraries/elixir",target:"_blank",rel:"noopener noreferrer"}},[t._v("forum"),s("OutboundLink")],1),t._v(", a "),s("a",{attrs:{href:""}},[t._v("GitHub issue")]),t._v(" or PR.")])])},[],!1,null,null,null);a.default=n.exports}}]);