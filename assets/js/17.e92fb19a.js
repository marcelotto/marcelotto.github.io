(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{207:function(a,t,e){"use strict";e.r(t);var s=e(2),n=Object(s.a)({},function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"blank-nodes"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#blank-nodes","aria-hidden":"true"}},[a._v("#")]),a._v(" Blank nodes")]),a._v(" "),e("p",[a._v("Blank nodes are nodes of an RDF graph without an IRI. They are always local to that graph and mostly used as helper nodes.")]),a._v(" "),e("p",[a._v("They can be created with "),e("code",[a._v("RDF.BlankNode.new")]),a._v(" or its alias function "),e("code",[a._v("RDF.bnode")]),a._v(". You can either pass an atom, string, integer or Erlang reference with a custom local identifier or call it without any arguments, which will create a local identifier automatically.")]),a._v(" "),e("div",{staticClass:"language-elixir extra-class"},[e("pre",{pre:!0,attrs:{class:"language-elixir"}},[e("code",[a._v("RDF"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("bnode"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token atom symbol"}},[a._v(":foo")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\nRDF"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("bnode"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("42")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\nRDF"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("bnode\n")])])]),e("p",[a._v("You can also use the "),e("code",[a._v("~B")]),a._v(" sigil to create a blank node with a custom name:")]),a._v(" "),e("div",{staticClass:"language-elixir extra-class"},[e("pre",{pre:!0,attrs:{class:"language-elixir"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("import")]),a._v(" RDF"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("Sigils\n~B"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("foo"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n")])])])])},[],!1,null,null,null);t.default=n.exports}}]);